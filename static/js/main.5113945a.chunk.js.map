{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","className","value","onChange","target","type","placeholder","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Header","title","Container","children","App","setHideDone","tasksFromLocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5113945a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    addNewTask(newTaskContent.trim());\r\n    setNewTaskContent(\"\");\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={onFormSubmit}\r\n      className=\"form\">\r\n      <h2 className=\"form__header\">Dodaj nowe zadanie</h2>\r\n      <div className=\"form__inputContainer\">\r\n        <input\r\n          value={newTaskContent}\r\n          onChange={({target}) => setNewTaskContent(target.value)}\r\n          type=\"text\"\r\n          className=\"form__input\"\r\n          placeholder=\"Co jest do zrobienia?\" />\r\n        <button className=\"form__button\">Dodaj zadanie</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n    <ul className=\"taskList\">\r\n        {tasks.map(task => (\r\n            <li className={`taskList__element ${task.done && hideDone ? \"taskList__element--hide\" : \"\"}`}>\r\n\r\n                {\r\n                    <>\r\n                        <button \r\n                        onClick={() => toggleTaskDone(task.id)}\r\n                        className=\"taskList__button taskList__button--green\">\r\n                            {`${task.done ? \"‚úî\" : \"\"}`}\r\n                        </button>\r\n\r\n                        <span className={`\"taskList__content\" ${task.done ? \"taskList__content--crossed\" : \"\"} `}>\r\n                            {task.content}\r\n                        </span>\r\n\r\n                        <button \r\n                        onClick={() => removeTask(task.id)}\r\n                        className=\"taskList__button taskList__button--red\">\r\n                            üóë\r\n                        </button>\r\n                    </>\r\n                }\r\n\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({tasks, hideDone, toggleHideDone, setAllDone}) => {\r\n    if (tasks.length === 0) {\r\n        return (\r\n            <div className=\"taskSection\">\r\n                <h2 className=\"container__header container__header--white\">Lista zada≈Ñ</h2>\r\n                <ul className=\"buttonList\"></ul>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"taskSection\">\r\n            <h2 className=\"container__header container__header--white\">Lista zada≈Ñ</h2>\r\n            <ul className=\"buttonList\">\r\n\r\n                <li className=\"buttonList__item\">\r\n                    <button\r\n                    onClick={toggleHideDone}\r\n                    className=\"buttonList__button\">\r\n                        {hideDone ? \"Poka≈º uko≈Ñczone\" : \"Ukryj uko≈Ñczone\"}\r\n                    </button>\r\n                </li>\r\n\r\n                <li className=\"buttonList__item\">\r\n                    <button\r\n                        onClick={setAllDone}\r\n                        className=\"buttonList__button\"\r\n                        disabled={tasks.every(({ done }) => done)}>\r\n                        Uko≈Ñcz wszystkie\r\n                        </button>\r\n                </li>\r\n\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1 className=\"container__header\">{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <div className=\"Container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React, { useState, useEffect } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  \n  const getInitialTasks = () => {\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n    return (\n      tasksFromLocalStorage\n        ? JSON.parse(tasksFromLocalStorage)\n        : []\n    )\n  }\n\n  const [tasks, setTasks] = useState(getInitialTasks);\n\n  \n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  }\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  }\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true, })))\n  }\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [...tasks,\n    {\n      content: newTaskContent,\n      done: false,\n      id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n    }\n    ])\n  }\n\n  return (\n    <Container>\n\n      <Header title=\"Lista zada≈Ñ\" />\n\n      <Form addNewTask={addNewTask} />\n\n      <Buttons\n        tasks={tasks}\n        hideDone={hideDone}\n        toggleHideDone={toggleHideDone}\n        setAllDone={setAllDone}\n      />\n\n      <Tasks\n        tasks={tasks}\n        hideDone={hideDone}\n        removeTask={removeTask}\n        toggleTaskDone={toggleTaskDone}\n      />\n\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}