{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","type","placeholder","Tasks","props","tasks","map","task","done","hideDoneTasks","content","Buttons","length","disabled","every","Header","title","Container","children","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAaeA,G,UAVF,kBACX,0BAAMC,UAAU,QACd,wBAAIA,UAAU,gBAAd,sBACA,yBAAKA,UAAU,wBACb,2BAAOC,KAAK,OAAOD,UAAU,cAAcE,YAAY,0BACvD,4BAAQF,UAAU,gBAAlB,qBCqBSG,G,MA1BD,SAACC,GAAD,OACV,wBAAIJ,UAAU,YACTI,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBAAIP,UAAS,4BAAuBO,EAAKC,MAAQJ,EAAMK,cAAgB,0BAA4B,KAG3F,oCACI,4BAAQT,UAAU,4CAAlB,UACQO,EAAKC,KAAO,SAAM,KAG1B,0BAAMR,UAAS,8BAAyBO,EAAKC,KAAO,6BAA+B,GAApE,MACVD,EAAKG,SAGV,4BAAQV,UAAU,0CAAlB,wBCkBTW,G,MAjCC,SAACP,GACb,OAA2B,IAAvBA,EAAMC,MAAMO,OAER,yBAAKZ,UAAU,eACX,wBAAIA,UAAU,8CAAd,qBAMR,yBAAKA,UAAU,eACX,wBAAIA,UAAU,8CAAd,oBACA,wBAAIA,UAAU,cAEV,wBAAIA,UAAU,oBACV,4BAAQA,UAAU,sBACbI,EAAMK,cAAgB,4BAAoB,yBAInD,wBAAIT,UAAU,oBACV,4BACIA,UAAU,qBACVa,SAAUT,EAAMC,MAAMS,OAAM,qBAAGN,SAFnC,8BCfLO,G,MANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACb,gCACE,wBAAIhB,UAAU,qBAAqBgB,MCKxBC,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAAKlB,UAAU,aACVkB,KCCHb,EAAQ,CACZ,CAAEc,GAAI,EAAGT,QAAS,qBAAiBF,MAAM,GACzC,CAAEW,GAAI,EAAGT,QAAS,wBAAoBF,MAAM,IAqB/BY,MAhBf,WACE,OACE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQJ,MAAM,qBAEd,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAASX,MAAOA,EAAOI,eAVP,IAYhB,kBAAC,EAAD,CAAOJ,MAAOA,EAAOI,eAZL,MCAFY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.88a79412.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n  <form className=\"form\">\r\n    <h2 className=\"form__header\">Dodaj nowe zadanie</h2>\r\n    <div className=\"form__inputContainer\">\r\n      <input type=\"text\" className=\"form__input\" placeholder=\"Co jest do zrobienia?\" />\r\n      <button className=\"form__button\">Dodaj zadanie</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n\r\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"taskList\">\r\n        {props.tasks.map(task => (\r\n            <li className={`taskList__element ${task.done && props.hideDoneTasks ? \"taskList__element--hide\" : \"\"}`}>\r\n\r\n                {\r\n                    <>\r\n                        <button className=\"taskList__button taskList__button--green\">\r\n                            {`${task.done ? \"âœ”\" : \"\"}`}\r\n                        </button>\r\n\r\n                        <span className={`\"taskList__content\" ${task.done ? \"taskList__content--crossed\" : \"\"} `}>\r\n                            {task.content}\r\n                        </span>\r\n\r\n                        <button className=\"taskList__button taskList__button--red\">\r\n                            ðŸ—‘\r\n                        </button>\r\n                    </>\r\n                }\r\n\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Buttons = (props) => {\r\n    if (props.tasks.length === 0) {\r\n        return (\r\n            <div className=\"taskSection\">\r\n                <h2 className=\"container__header container__header--white\">Lista zadaÅ„</h2>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"taskSection\">\r\n            <h2 className=\"container__header container__header--white\">Lista zadaÅ„</h2>\r\n            <ul className=\"buttonList\">\r\n\r\n                <li className=\"buttonList__item\">\r\n                    <button className=\"buttonList__button\">\r\n                        {props.hideDoneTasks ? \"PokaÅ¼ ukoÅ„czone\" : \"Ukryj ukoÅ„czone\"}\r\n                    </button>\r\n                </li>\r\n\r\n                <li className=\"buttonList__item\">\r\n                    <button\r\n                        className=\"buttonList__button\"\r\n                        disabled={props.tasks.every(({ done }) => done)}>\r\n                        UkoÅ„cz wszystkie\r\n                        </button>\r\n                </li>\r\n\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1 className=\"container__header\">{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <div className=\"Container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nconst tasks = [\n  { id: 1, content: \"ZrobiÄ‡ pranie\", done: true },\n  { id: 2, content: \"ZrobiÄ‡ jedzienie\", done: true },\n];\n\nconst hideDoneTasks = false;\n\nfunction App() {\n  return (\n    <Container>\n\n      <Header title=\"Lista zadaÅ„\" />\n\n      <Form />\n\n      <Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} />\n\n      <Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} />\n\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}